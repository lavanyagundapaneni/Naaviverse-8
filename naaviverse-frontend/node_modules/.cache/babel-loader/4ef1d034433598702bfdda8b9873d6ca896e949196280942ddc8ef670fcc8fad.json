{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\chint\\\\Downloads\\\\naaviverse-frontend\\\\src\\\\pages\\\\MapsPage\\\\MapComponent.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { ComposableMap, Geographies, Geography, Annotation, ZoomableGroup } from \"react-simple-maps\";\nimport \"./mapcomponent.scss\";\nimport worldCountriesData from \"./message.json\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapComponent = () => {\n  _s();\n  const [center, setCenter] = useState([0, 0]);\n  const [zoom, setZoom] = useState(1);\n  const [data, setData] = useState([]);\n  const handleGeographyClick = geo => {\n    var _geo$properties;\n    const newZoom = zoom === 1 ? 2 : 1;\n    const newCenter = geo === null || geo === void 0 ? void 0 : (_geo$properties = geo.properties) === null || _geo$properties === void 0 ? void 0 : _geo$properties.centroid;\n    setZoom(newZoom);\n    setCenter(newCenter);\n  };\n  useEffect(() => {\n    axios.get(\"https://careers.marketsverse.com/paths/get\").then(response => {\n      var _response$data;\n      let result = response === null || response === void 0 ? void 0 : (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.data;\n      // console.log(result, \"maps page result\");\n      setData(result);\n    }).catch(error => {\n      console.log(error, \"error in maps page\");\n    });\n  }, []);\n  function getBoundingBox(coordinates) {\n    let minX = Infinity;\n    let minY = Infinity;\n    let maxX = -Infinity;\n    let maxY = -Infinity;\n    coordinates.forEach(ring => {\n      ring.forEach(([x, y]) => {\n        minX = Math.min(minX, x);\n        minY = Math.min(minY, y);\n        maxX = Math.max(maxX, x);\n        maxY = Math.max(maxY, y);\n      });\n    });\n    return [minX, minY, maxX, maxY];\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"map-component\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"abs-div\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"path-count\",\n        children: [data === null || data === void 0 ? void 0 : data.length, \" Paths Found\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ComposableMap, {\n      projectionConfig: {\n        rotate: [-10, 0, 0],\n        scale: 147\n      },\n      children: /*#__PURE__*/_jsxDEV(ZoomableGroup, {\n        center: center,\n        zoom: zoom,\n        children: /*#__PURE__*/_jsxDEV(Geographies, {\n          geography: worldCountriesData,\n          children: ({\n            geographies\n          }) => geographies.map(geo => {\n            const countryData = data === null || data === void 0 ? void 0 : data.find(item => {\n              var _item$country;\n              return (item === null || item === void 0 ? void 0 : (_item$country = item.country) === null || _item$country === void 0 ? void 0 : _item$country.toLowerCase()) === geo.properties.name.toLowerCase();\n            });\n            // console.log(countryData, \"countryData\");\n            // Calculate the approximate center using the coordinates\n            const coordinates = geo.geometry.coordinates;\n            const [minX, minY, maxX, maxY] = getBoundingBox(coordinates);\n            const centerX = (maxX + minX) / 2;\n            const centerY = (maxY + minY) / 2;\n            return /*#__PURE__*/_jsxDEV(React.Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(Geography, {\n                geography: geo,\n                onClick: () => handleGeographyClick(geo),\n                style: {\n                  default: {\n                    fill: \"#e5e5e5\"\n                  },\n                  hover: {\n                    fill: \"#59a2dd\"\n                  }\n                }\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 85,\n                columnNumber: 21\n              }, this), countryData && /*#__PURE__*/_jsxDEV(\"g\", {\n                transform: `translate(${centerX}, ${centerY})`,\n                children: [/*#__PURE__*/_jsxDEV(\"circle\", {\n                  cx: 0,\n                  cy: 0,\n                  r: 3 // Adjust the radius as needed\n                  ,\n                  fill: \"#59a2dd\" // Color of the round mark\n                  ,\n                  stroke: \"#59a2dd\",\n                  strokeWidth: 2\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 99,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"text\", {\n                  x: 10 // Adjust the text position\n                  ,\n                  textAnchor: \"start\",\n                  alignmentBaseline: \"middle\"\n                  // fill=\"red\"\n                  ,\n                  children: countryData.country\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 107,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 98,\n                columnNumber: 23\n              }, this)]\n            }, geo.rsmKey, true, {\n              fileName: _jsxFileName,\n              lineNumber: 84,\n              columnNumber: 19\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 57,\n    columnNumber: 5\n  }, this);\n};\n_s(MapComponent, \"UkbUgvAS5F+Q6WPsIkMIs/St1NE=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useState","ComposableMap","Geographies","Geography","Annotation","ZoomableGroup","worldCountriesData","axios","jsxDEV","_jsxDEV","MapComponent","_s","center","setCenter","zoom","setZoom","data","setData","handleGeographyClick","geo","_geo$properties","newZoom","newCenter","properties","centroid","get","then","response","_response$data","result","catch","error","console","log","getBoundingBox","coordinates","minX","Infinity","minY","maxX","maxY","forEach","ring","x","y","Math","min","max","className","children","length","fileName","_jsxFileName","lineNumber","columnNumber","projectionConfig","rotate","scale","geography","geographies","map","countryData","find","item","_item$country","country","toLowerCase","name","geometry","centerX","centerY","Fragment","onClick","style","default","fill","hover","transform","cx","cy","r","stroke","strokeWidth","textAnchor","alignmentBaseline","rsmKey","_c","$RefreshReg$"],"sources":["C:/Users/chint/Downloads/naaviverse-frontend/src/pages/MapsPage/MapComponent.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  ComposableMap,\r\n  Geographies,\r\n  Geography,\r\n  Annotation,\r\n  ZoomableGroup,\r\n} from \"react-simple-maps\";\r\nimport \"./mapcomponent.scss\";\r\nimport worldCountriesData from \"./message.json\";\r\nimport axios from \"axios\";\r\n\r\nconst MapComponent = () => {\r\n  const [center, setCenter] = useState([0, 0]);\r\n  const [zoom, setZoom] = useState(1);\r\n  const [data, setData] = useState([]);\r\n\r\n  const handleGeographyClick = (geo) => {\r\n    const newZoom = zoom === 1 ? 2 : 1;\r\n    const newCenter = geo?.properties?.centroid;\r\n    setZoom(newZoom);\r\n    setCenter(newCenter);\r\n  };\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\"https://careers.marketsverse.com/paths/get\")\r\n      .then((response) => {\r\n        let result = response?.data?.data;\r\n        // console.log(result, \"maps page result\");\r\n        setData(result);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error, \"error in maps page\");\r\n      });\r\n  }, []);\r\n\r\n  function getBoundingBox(coordinates) {\r\n    let minX = Infinity;\r\n    let minY = Infinity;\r\n    let maxX = -Infinity;\r\n    let maxY = -Infinity;\r\n\r\n    coordinates.forEach((ring) => {\r\n      ring.forEach(([x, y]) => {\r\n        minX = Math.min(minX, x);\r\n        minY = Math.min(minY, y);\r\n        maxX = Math.max(maxX, x);\r\n        maxY = Math.max(maxY, y);\r\n      });\r\n    });\r\n\r\n    return [minX, minY, maxX, maxY];\r\n  }\r\n\r\n  return (\r\n    <div className=\"map-component\">\r\n      <div className=\"abs-div\">\r\n        <div className=\"path-count\">{data?.length} Paths Found</div>\r\n      </div>\r\n      <ComposableMap\r\n        projectionConfig={{\r\n          rotate: [-10, 0, 0],\r\n          scale: 147,\r\n        }}\r\n      >\r\n        <ZoomableGroup center={center} zoom={zoom}>\r\n          <Geographies geography={worldCountriesData}>\r\n            {({ geographies }) =>\r\n              geographies.map((geo) => {\r\n                const countryData = data?.find(\r\n                  (item) =>\r\n                    item?.country?.toLowerCase() ===\r\n                    geo.properties.name.toLowerCase()\r\n                );\r\n                // console.log(countryData, \"countryData\");\r\n                // Calculate the approximate center using the coordinates\r\n                const coordinates = geo.geometry.coordinates;\r\n                const [minX, minY, maxX, maxY] = getBoundingBox(coordinates);\r\n\r\n                const centerX = (maxX + minX) / 2;\r\n                const centerY = (maxY + minY) / 2;\r\n                return (\r\n                  <React.Fragment key={geo.rsmKey}>\r\n                    <Geography\r\n                      geography={geo}\r\n                      onClick={() => handleGeographyClick(geo)}\r\n                      style={{\r\n                        default: {\r\n                          fill: \"#e5e5e5\",\r\n                        },\r\n                        hover: {\r\n                          fill: \"#59a2dd\",\r\n                        },\r\n                      }}\r\n                    />\r\n                    {countryData && (\r\n                      <g transform={`translate(${centerX}, ${centerY})`}>\r\n                        <circle\r\n                          cx={0}\r\n                          cy={0}\r\n                          r={3} // Adjust the radius as needed\r\n                          fill=\"#59a2dd\" // Color of the round mark\r\n                          stroke=\"#59a2dd\"\r\n                          strokeWidth={2}\r\n                        />\r\n                        <text\r\n                          x={10} // Adjust the text position\r\n                          textAnchor=\"start\"\r\n                          alignmentBaseline=\"middle\"\r\n                          // fill=\"red\"\r\n                        >\r\n                          {countryData.country}\r\n                        </text>\r\n                      </g>\r\n                    )}\r\n                  </React.Fragment>\r\n                );\r\n              })\r\n            }\r\n          </Geographies>\r\n        </ZoomableGroup>\r\n      </ComposableMap>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapComponent;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}