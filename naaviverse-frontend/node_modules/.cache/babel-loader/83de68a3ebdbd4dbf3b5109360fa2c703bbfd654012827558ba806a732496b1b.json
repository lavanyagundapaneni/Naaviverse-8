{"ast":null,"code":"import moment from 'moment';\nimport TimeAgo from 'javascript-time-ago';\nexport function FormatNumber(val, prec, def) {\n  if (!isNaN(def)) {\n    return new Intl.NumberFormat('en-US', {\n      maximumFractionDigits: def,\n      minimumFractionDigits: def\n    }).format(isNaN(val) ? 0 : val);\n  }\n  return new Intl.NumberFormat('en-US', {\n    maximumFractionDigits: prec,\n    minimumFractionDigits: prec\n  }).format(isNaN(val) || val);\n}\n_c = FormatNumber;\nexport const roundHelper = (value, currency) => {\n  if (!currency) {\n    return fiatFormatter(value);\n  }\n  if (cryptoList.includes(currency.toUpperCase())) {\n    return cryptoFormatter(value);\n  }\n  return fiatFormatter(value);\n};\nexport const fiatFormatter = value => {\n  const parsedFloatValue = parseFloat(value);\n  return parsedFloatValue.toFixed(2);\n};\nexport const cryptoList = ['ETH', 'BTC', 'LTC'];\nexport const formatterHelper = (value, currency) => {\n  if (!currency) {\n    return usdValueFormatterWithoutSign.format(value);\n  }\n  if (currency === 'USD') {\n    return usdValueFormatter.format(value);\n  }\n  if (cryptoList.includes(currency.toUpperCase())) {\n    return cryptoFormatter(value);\n  }\n  return usdValueFormatterWithoutSign.format(value);\n};\nexport const cryptoFormatter = value => {\n  const parsedFloatValue = parseFloat(value);\n  const parsedIntValue = parseInt(value);\n  const numberOfdigitsBeforDecimel = parsedIntValue.toString().length;\n  const delta = 5 - numberOfdigitsBeforDecimel;\n  return parsedFloatValue.toFixed(delta < 0 ? 0 : delta);\n};\nexport const usdValueFormatter = new Intl.NumberFormat('en-US', {\n  style: 'currency',\n  currency: 'USD',\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2\n});\nexport const usdValueFormatterWithoutSign = new Intl.NumberFormat('en-US', {\n  minimumFractionDigits: 2,\n  maximumFractionDigits: 2\n});\nexport function FormatCurrency(value = 0, coin = 'USD', def) {\n  if (def && !isNaN(def)) {\n    return FormatNumber(value, def);\n  }\n  if (value < 1) {\n    return FormatNumber(value, 7);\n  }\n  if (typeof coin === 'string' && ((coin === null || coin === void 0 ? void 0 : coin.toUpperCase()) === 'BTC' || (coin === null || coin === void 0 ? void 0 : coin.toUpperCase()) === 'ETH')) {\n    if (value < 10) {\n      return FormatNumber(value, 4);\n    } else {\n      return FormatNumber(value, 3);\n    }\n  }\n  return FormatNumber(value, 2);\n}\n_c2 = FormatCurrency;\nexport function YesterdayToday(timestamp, format = 'MMMM Do YYYY') {\n  if (moment(timestamp).format('MMDDYYYY') === moment().format('MMDDYYYY')) {\n    return 'Today';\n  } else if (moment(timestamp).format('MMDDYYYY') === moment().add(-1, 'day').format('MMDDYYYY')) {\n    return 'Yesterday';\n  } else {\n    return moment(timestamp).format(format);\n  }\n}\n_c3 = YesterdayToday;\nexport function IsValidURL(str) {\n  const urlRegex = new RegExp('^(https?:\\\\/\\\\/)?' +\n  // protocol\n  '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' +\n  // domain name\n  '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' +\n  // OR ip (v4) address\n  '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' +\n  // port and path\n  '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' +\n  // query string\n  '(\\\\#[-a-z\\\\d_]*)?$', 'i'); // fragment locator\n  return urlRegex.test(str) ? str : false;\n}\n_c4 = IsValidURL;\nexport const timeAgoFormatter = timestamp => {\n  let text = '';\n  try {\n    const timeAgo = new TimeAgo('en-US');\n    text = timeAgo.format(timestamp);\n  } catch (error) {}\n  return text;\n};\nexport function GetSortOrder(prop, order = 1) {\n  return function (a, b) {\n    if (a[prop] < b[prop]) {\n      return -1 * order;\n    } else if (a[prop] > b[prop]) {\n      return 1 * order;\n    }\n    return 0 * order;\n  };\n}\n_c5 = GetSortOrder;\nexport const validateEmail = email => {\n  return /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(email);\n};\nconst capRegex = new RegExp(/^.*[A-Z].*/);\nconst numRegex = new RegExp(/^.*[0-9].*/);\nconst speRegex = new RegExp(/^.*[!@#$%^&*()+=].*/);\nexport const validatePassword = password => {\n  return capRegex.test(password) && numRegex.test(password) && speRegex.test(password) && password.length >= 8;\n};\nexport const getDateTime = val => {\n  let timestamp = val;\n  let date = new Date(timestamp);\n  let hours = date.getHours();\n  let minutes = date.getMinutes();\n  let ampm = hours >= 12 ? 'PM' : 'AM';\n  hours = hours % 12;\n  hours = hours ? hours : 12;\n  minutes = minutes < 10 ? '0' + minutes : minutes;\n  let strTime = hours + ':' + minutes + ' ' + ampm;\n  return date.toString().substring(4, 15) + ' At ' + strTime + ' EST';\n};\nexport const getTime = val => {\n  let timestamp = val;\n  let date = new Date(timestamp);\n  let hours = date.getHours();\n  let minutes = date.getMinutes();\n  let ampm = hours >= 12 ? 'PM' : 'AM';\n  hours = hours % 12;\n  hours = hours ? hours : 12;\n  minutes = minutes < 10 ? '0' + minutes : minutes;\n  let strTime = hours + ':' + minutes + ' ' + ampm;\n  return strTime + ' EST';\n};\nexport const getTimeFull = val => {\n  let timestamp = val;\n  let date = new Date(timestamp);\n  let hours = date.getHours();\n  let minutes = date.getMinutes();\n  hours = hours % 24;\n  hours = hours ? hours : 12;\n  minutes = minutes < 10 ? '0' + minutes : minutes;\n  let strTime = hours + ':' + minutes + ' ';\n  return strTime + ' EST';\n};\nexport const getYear = val => {\n  let timestamp = val;\n  let date = new Date(timestamp);\n  let monthNameLong = date.toLocaleString('en-US', {\n    month: 'long'\n  });\n  return monthNameLong + ' ' + date.toString().substring(8, 15);\n};\nexport function pasteSelected(setValue) {\n  navigator.clipboard.readText().then(cliptext => {\n    document.getElementById('clipboard').value = cliptext;\n    setValue(cliptext);\n  }, err => console.log(err));\n}\nexport const handleDecimal = num => {\n  var _num, _num2, _num3;\n  num = (_num = num) === null || _num === void 0 ? void 0 : _num.toString();\n  num = (_num2 = num) === null || _num2 === void 0 ? void 0 : _num2.slice(0, ((_num3 = num) === null || _num3 === void 0 ? void 0 : _num3.indexOf('.')) + 5);\n  return Number(num);\n};\nexport const onPaste = async callback => {\n  if (callback) {\n    const copiedText = await navigator.clipboard.readText();\n    callback(copiedText.trim());\n  }\n};\nvar _c, _c2, _c3, _c4, _c5;\n$RefreshReg$(_c, \"FormatNumber\");\n$RefreshReg$(_c2, \"FormatCurrency\");\n$RefreshReg$(_c3, \"YesterdayToday\");\n$RefreshReg$(_c4, \"IsValidURL\");\n$RefreshReg$(_c5, \"GetSortOrder\");","map":{"version":3,"names":["moment","TimeAgo","FormatNumber","val","prec","def","isNaN","Intl","NumberFormat","maximumFractionDigits","minimumFractionDigits","format","_c","roundHelper","value","currency","fiatFormatter","cryptoList","includes","toUpperCase","cryptoFormatter","parsedFloatValue","parseFloat","toFixed","formatterHelper","usdValueFormatterWithoutSign","usdValueFormatter","parsedIntValue","parseInt","numberOfdigitsBeforDecimel","toString","length","delta","style","FormatCurrency","coin","_c2","YesterdayToday","timestamp","add","_c3","IsValidURL","str","urlRegex","RegExp","test","_c4","timeAgoFormatter","text","timeAgo","error","GetSortOrder","prop","order","a","b","_c5","validateEmail","email","capRegex","numRegex","speRegex","validatePassword","password","getDateTime","date","Date","hours","getHours","minutes","getMinutes","ampm","strTime","substring","getTime","getTimeFull","getYear","monthNameLong","toLocaleString","month","pasteSelected","setValue","navigator","clipboard","readText","then","cliptext","document","getElementById","err","console","log","handleDecimal","num","_num","_num2","_num3","slice","indexOf","Number","onPaste","callback","copiedText","trim","$RefreshReg$"],"sources":["C:/Users/chint/Downloads/naaviverse-frontend/src/pages/Transactions/VaultComponent/FunctionTools.js"],"sourcesContent":["import moment from 'moment';\r\nimport TimeAgo from 'javascript-time-ago';\r\n\r\nexport function FormatNumber(val, prec, def) {\r\n  if (!isNaN(def)) {\r\n    return new Intl.NumberFormat('en-US', {\r\n      maximumFractionDigits: def,\r\n      minimumFractionDigits: def,\r\n    }).format(isNaN(val) ? 0 : val);\r\n  }\r\n  return new Intl.NumberFormat('en-US', {\r\n    maximumFractionDigits: prec,\r\n    minimumFractionDigits: prec,\r\n  }).format(isNaN(val) || val);\r\n}\r\n\r\nexport const roundHelper = (value, currency) => {\r\n  if (!currency) {\r\n    return fiatFormatter(value);\r\n  }\r\n\r\n  if (cryptoList.includes(currency.toUpperCase())) {\r\n    return cryptoFormatter(value);\r\n  }\r\n\r\n  return fiatFormatter(value);\r\n};\r\n\r\nexport const fiatFormatter = (value) => {\r\n  const parsedFloatValue = parseFloat(value);\r\n\r\n  return parsedFloatValue.toFixed(2);\r\n};\r\n\r\nexport const cryptoList = ['ETH', 'BTC', 'LTC'];\r\n\r\nexport const formatterHelper = (value, currency) => {\r\n  if (!currency) {\r\n    return usdValueFormatterWithoutSign.format(value);\r\n  }\r\n\r\n  if (currency === 'USD') {\r\n    return usdValueFormatter.format(value);\r\n  }\r\n\r\n  if (cryptoList.includes(currency.toUpperCase())) {\r\n    return cryptoFormatter(value);\r\n  }\r\n\r\n  return usdValueFormatterWithoutSign.format(value);\r\n};\r\n\r\nexport const cryptoFormatter = (value) => {\r\n  const parsedFloatValue = parseFloat(value);\r\n  const parsedIntValue = parseInt(value);\r\n\r\n  const numberOfdigitsBeforDecimel = parsedIntValue.toString().length;\r\n\r\n  const delta = 5 - numberOfdigitsBeforDecimel;\r\n\r\n  return parsedFloatValue.toFixed(delta < 0 ? 0 : delta);\r\n};\r\n\r\nexport const usdValueFormatter = new Intl.NumberFormat('en-US', {\r\n  style: 'currency',\r\n  currency: 'USD',\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport const usdValueFormatterWithoutSign = new Intl.NumberFormat('en-US', {\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport function FormatCurrency(value = 0, coin = 'USD', def) {\r\n  if (def && !isNaN(def)) {\r\n    return FormatNumber(value, def);\r\n  }\r\n  if (value < 1) {\r\n    return FormatNumber(value, 7);\r\n  }\r\n  if (\r\n    typeof coin === 'string' &&\r\n    (coin?.toUpperCase() === 'BTC' || coin?.toUpperCase() === 'ETH')\r\n  ) {\r\n    if (value < 10) {\r\n      return FormatNumber(value, 4);\r\n    } else {\r\n      return FormatNumber(value, 3);\r\n    }\r\n  }\r\n  return FormatNumber(value, 2);\r\n}\r\n\r\nexport function YesterdayToday(timestamp, format = 'MMMM Do YYYY') {\r\n  if (moment(timestamp).format('MMDDYYYY') === moment().format('MMDDYYYY')) {\r\n    return 'Today';\r\n  } else if (\r\n    moment(timestamp).format('MMDDYYYY') ===\r\n    moment().add(-1, 'day').format('MMDDYYYY')\r\n  ) {\r\n    return 'Yesterday';\r\n  } else {\r\n    return moment(timestamp).format(format);\r\n  }\r\n}\r\nexport function IsValidURL(str) {\r\n  const urlRegex = new RegExp(\r\n    '^(https?:\\\\/\\\\/)?' + // protocol\r\n      '((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|' + // domain name\r\n      '((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))' + // OR ip (v4) address\r\n      '(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*' + // port and path\r\n      '(\\\\?[;&a-z\\\\d%_.~+=-]*)?' + // query string\r\n      '(\\\\#[-a-z\\\\d_]*)?$',\r\n    'i'\r\n  ); // fragment locator\r\n  return urlRegex.test(str) ? str : false;\r\n}\r\n\r\nexport const timeAgoFormatter = (timestamp) => {\r\n  let text = '';\r\n\r\n  try {\r\n    const timeAgo = new TimeAgo('en-US');\r\n    text = timeAgo.format(timestamp);\r\n  } catch (error) {}\r\n\r\n  return text;\r\n};\r\n\r\nexport function GetSortOrder(prop, order = 1) {\r\n  return function (a, b) {\r\n    if (a[prop] < b[prop]) {\r\n      return -1 * order;\r\n    } else if (a[prop] > b[prop]) {\r\n      return 1 * order;\r\n    }\r\n    return 0 * order;\r\n  };\r\n}\r\n\r\nexport const validateEmail = (email) => {\r\n  return /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/.test(\r\n    email\r\n  );\r\n};\r\n\r\nconst capRegex = new RegExp(/^.*[A-Z].*/);\r\nconst numRegex = new RegExp(/^.*[0-9].*/);\r\nconst speRegex = new RegExp(/^.*[!@#$%^&*()+=].*/);\r\n\r\nexport const validatePassword = (password) => {\r\n  return (\r\n    capRegex.test(password) &&\r\n    numRegex.test(password) &&\r\n    speRegex.test(password) &&\r\n    password.length >= 8\r\n  );\r\n};\r\n\r\nexport const getDateTime = (val) => {\r\n  let timestamp = val;\r\n  let date = new Date(timestamp);\r\n  let hours = date.getHours();\r\n  let minutes = date.getMinutes();\r\n  let ampm = hours >= 12 ? 'PM' : 'AM';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12;\r\n  minutes = minutes < 10 ? '0' + minutes : minutes;\r\n  let strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return date.toString().substring(4, 15) + ' At ' + strTime + ' EST';\r\n};\r\n\r\nexport const getTime = (val) => {\r\n  let timestamp = val;\r\n  let date = new Date(timestamp);\r\n  let hours = date.getHours();\r\n  let minutes = date.getMinutes();\r\n  let ampm = hours >= 12 ? 'PM' : 'AM';\r\n  hours = hours % 12;\r\n  hours = hours ? hours : 12;\r\n  minutes = minutes < 10 ? '0' + minutes : minutes;\r\n  let strTime = hours + ':' + minutes + ' ' + ampm;\r\n  return strTime + ' EST';\r\n};\r\n\r\nexport const getTimeFull = (val) => {\r\n  let timestamp = val;\r\n  let date = new Date(timestamp);\r\n  let hours = date.getHours();\r\n  let minutes = date.getMinutes();\r\n  hours = hours % 24;\r\n  hours = hours ? hours : 12;\r\n  minutes = minutes < 10 ? '0' + minutes : minutes;\r\n  let strTime = hours + ':' + minutes + ' ';\r\n  return strTime + ' EST';\r\n};\r\n\r\nexport const getYear = (val) => {\r\n  let timestamp = val;\r\n  let date = new Date(timestamp);\r\n  let monthNameLong = date.toLocaleString('en-US', { month: 'long' });\r\n  return monthNameLong + ' ' + date.toString().substring(8, 15);\r\n};\r\n\r\nexport function pasteSelected(setValue) {\r\n  navigator.clipboard.readText().then(\r\n    (cliptext) => {\r\n      document.getElementById('clipboard').value = cliptext;\r\n      setValue(cliptext);\r\n    },\r\n    (err) => console.log(err)\r\n  );\r\n}\r\n\r\nexport const handleDecimal = (num) => {\r\n  num = num?.toString();\r\n  num = num?.slice(0, num?.indexOf('.') + 5);\r\n  return Number(num);\r\n};\r\n\r\nexport const onPaste = async (callback) => {\r\n  if (callback) {\r\n    const copiedText = await navigator.clipboard.readText();\r\n\r\n    callback(copiedText.trim());\r\n  }\r\n};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}