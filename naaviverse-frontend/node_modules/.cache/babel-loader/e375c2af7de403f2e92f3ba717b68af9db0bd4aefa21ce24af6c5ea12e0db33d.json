{"ast":null,"code":"import axios from \"axios\";\nimport Axios from \"axios\";\nexport const login = async object => {\n  try {\n    console.log(\"Payload Sent to API:\", object); // Debugging step\n\n    const response = await axios.post(`/auth/login`, object, {\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    });\n\n    // Check if the response contains a valid token\n    if (response.data.token) {\n      console.log(\"Login successful:\", response.data);\n\n      // Save the token to localStorage or sessionStorage\n      localStorage.setItem('authToken', response.data.token); // You can use sessionStorage if you want the token to expire after the session\n\n      // Optionally, return user details or the token for further use\n      return {\n        success: true,\n        token: response.data.token,\n        user: response.data.user\n      };\n    } else {\n      console.error(\"Invalid credentials or missing token in response\");\n      throw new Error(\"Invalid credentials\");\n    }\n  } catch (error) {\n    var _error$response;\n    console.error(\"Login API Error:\", ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || error.message);\n    // Handle API error or network error\n    throw error;\n  }\n};\nexport const getCoinsForApp = app => {\n  return axios.post(`https://comms.globalxchange.io/coin/vault/service/coins/get`, {\n    app_code: app\n  });\n};\nexport const _2FALogin = data => {\n  return axios.post(`https://gxauth.apimachine.com/gx/user/auth/login/challenge`, {\n    ...data\n  });\n};\nexport const liquidAssetList = data => {\n  return axios.post(`https://comms.globalxchange.io/coin/vault/service/txns/get`, {\n    ...data\n  });\n};\nexport const authenticate = () => {\n  let email = localStorage.getItem(\"bankerEmailNew\");\n  let token = localStorage.getItem(\"TokenId\");\n  return axios.post(`https://comms.globalxchange.io/coin/verifyToken`, {\n    email: email,\n    token: token\n  });\n};\nexport const forgetPasswordRequest = email => {\n  let config = {\n    method: \"post\",\n    url: `https://gxauth.apimachine.com/gx/user/password/forgot/request`,\n    data: {\n      email: email\n    }\n  };\n  return axios(config);\n};\nexport const resetPassword = details => {\n  let config = {\n    method: \"post\",\n    url: `https://gxauth.apimachine.com/gx/user/password/forgot/confirm`,\n    data: {\n      email: details.email,\n      code: details.code,\n      newPassword: details.newPassword\n    }\n  };\n  return Axios(config);\n};","map":{"version":3,"names":["axios","Axios","login","object","console","log","response","post","headers","data","token","localStorage","setItem","success","user","error","Error","_error$response","message","getCoinsForApp","app","app_code","_2FALogin","liquidAssetList","authenticate","email","getItem","forgetPasswordRequest","config","method","url","resetPassword","details","code","newPassword"],"sources":["C:/Users/chint/Downloads/naaviverse-frontend/src/pages/dashboard/WalletScan/services/postAPIs.js"],"sourcesContent":["import axios from \"axios\";\r\nimport Axios from \"axios\";\r\n\r\nexport const login = async (object) => {\r\n  try {\r\n    console.log(\"Payload Sent to API:\", object); // Debugging step\r\n\r\n    const response = await axios.post(`/auth/login`, object, {\r\n      headers: {\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n\r\n    // Check if the response contains a valid token\r\n    if (response.data.token) {\r\n      console.log(\"Login successful:\", response.data);\r\n      \r\n      // Save the token to localStorage or sessionStorage\r\n      localStorage.setItem('authToken', response.data.token); // You can use sessionStorage if you want the token to expire after the session\r\n      \r\n      // Optionally, return user details or the token for further use\r\n      return { success: true, token: response.data.token, user: response.data.user };\r\n    } else {\r\n      console.error(\"Invalid credentials or missing token in response\");\r\n      throw new Error(\"Invalid credentials\");\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Login API Error:\", error.response?.data || error.message);\r\n    // Handle API error or network error\r\n    throw error;\r\n  }\r\n};\r\n\r\n\r\nexport const getCoinsForApp = (app) => {\r\n  return axios.post(\r\n    `https://comms.globalxchange.io/coin/vault/service/coins/get`,\r\n    {\r\n      app_code: app,\r\n    }\r\n  );\r\n};\r\n\r\nexport const _2FALogin = (data) => {\r\n  return axios.post(`https://gxauth.apimachine.com/gx/user/auth/login/challenge`, { ...data });\r\n};\r\n\r\nexport const liquidAssetList = (data) => {\r\n  return axios.post(\r\n    `https://comms.globalxchange.io/coin/vault/service/txns/get`,\r\n    { ...data }\r\n  );\r\n};\r\n\r\nexport const authenticate = () => {\r\n  let email = localStorage.getItem(\"bankerEmailNew\");\r\n  let token = localStorage.getItem(\"TokenId\");\r\n\r\n  return axios.post(`https://comms.globalxchange.io/coin/verifyToken`, {\r\n    email: email,\r\n    token: token,\r\n  });\r\n};\r\nexport const forgetPasswordRequest = (email) => {\r\n  let config = {\r\n    method: \"post\",\r\n    url: `https://gxauth.apimachine.com/gx/user/password/forgot/request`,\r\n    data: {\r\n      email: email,\r\n    },\r\n  };\r\n  return axios(config);\r\n};\r\nexport const resetPassword = (details) => {\r\n  let config = {\r\n    method: \"post\",\r\n    url: `https://gxauth.apimachine.com/gx/user/password/forgot/confirm`,\r\n    data: {\r\n      email: details.email,\r\n      code: details.code,\r\n      newPassword: details.newPassword,\r\n    },\r\n  };\r\n  return Axios(config);\r\n};"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}